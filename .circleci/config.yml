version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.15
  slack: circleci/slack@3.4.2
commands:
  install:
    parameters:
      key:
        type: string
        default: 'select-frontend'
    steps:
      - restore_cache:
          keys:
            - <<parameters.key>>-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - <<parameters.key>>-{{ .Branch }}-
            - <<parameters.key>>-
      - run:
          name: Install yarn packages
          command: yarn install --frozen-lockfile
      - save_cache:
          key: <<parameters.key>>-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: ~/.cache/yarn
  sentry_upload:
    steps:
      - run:
          command: curl -sL https://sentry.io/get-cli/ | bash
      - run:
          command: |
            sentry-cli releases new ${CIRCLE_SHA1}
            sentry-cli releases files ${CIRCLE_SHA1} upload-sourcemaps dist/
            sentry-cli releases finalize ${CIRCLE_SHA1}
          environment:
            SENTRY_LOG_LEVEL: debug
  notify:
    parameters:
      channel:
        type: string
        default: deploy-select
      prefix:
        type: string
        default: ''
    steps:
      - run:
          command: |
            export TITLE="`git show -s --format=%s -n1 $CIRCLE_SHA1 | sed "s/'/\\\\\'/g"`"
            export MESSAGE="`git show -s --format=%b $CIRCLE_SHA1 | sed "s/'/\\\\\'/g"`"
            echo "export TITLE='$(echo "$TITLE")'" >> $BASH_ENV
            echo "export MESSAGE='$(echo "$MESSAGE")'" >> $BASH_ENV
      - slack/notify:
          color: good
          title: << parameters.prefix >> $TITLE
          title_link: https://github.com/ridi/select-frontend/commit/$CIRCLE_SHA1
          message: $MESSAGE
          channel: << parameters.channel >>
          include_project_field: false
          include_job_number_field: false
jobs:
  build:
    docker:
      - image: circleci/node:lts
    working_directory: ~/select-frontend
    parameters:
      dev:
        type: boolean
        default: false
    steps:
      - checkout
      - install
      - when:
          condition: << parameters.dev >>
          steps:
            - run:
                command: |
                  unset ASSET_PATH
                  unset SENTRY_DSN
                  yarn webpack
                environment:
                  SELECT_URL: https://select.ridi.io
                  SELECT_API: https://select-api.dev.ridi.io
                  STORE_URL: https://master.test.ridi.io
                  STORE_API: https://master.test.ridi.io
                  PAY_URL: https://pay.ridi.io
                  PAY_API: https://pay-api.dev.ridi.io
                  ACCOUNT_API: https://account.dev.ridi.io
                  SEARCH_API: https://search-api.staging.ridi.io
                  BESTSELLER_API: https://bestseller-api.staging.ridi.io
                  OAUTH2_CLIENT_ID: $DEV_OAUTH2_CLIENT_ID
      - unless:
          condition: << parameters.dev >>
          steps:
            - run:
                command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - dist/
  deploy:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/select-frontend
    parameters:
      aws-access-key-id:
        type: env_var_name
        default: PROD_AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        type: env_var_name
        default: PROD_AWS_SECRET_ACCESS_KEY
      s3-bucket:
        type: env_var_name
        default: PROD_S3_BUCKET
      entry-file:
        type: string
        default: index.html
      arguments:
        type: string
        default: ''
      after-scripts:
        type: steps
        default: []
    environment:
      S3_RELEASE_PARAMS: '--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate'
      S3_ASSETS_PARAMS: '--cache-control public,max-age=31536000'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-s3/sync:
          from: dist
          to: s3://${<< parameters.s3-bucket >>}
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          arguments: |
            ${S3_ASSETS_PARAMS} \
            << parameters.arguments >>
      - aws-s3/copy:
          from: s3://${<< parameters.s3-bucket >>}/<< parameters.entry-file >>
          to: s3://${<< parameters.s3-bucket >>}/<< parameters.entry-file >>
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          arguments: ${S3_RELEASE_PARAMS}
      - steps: << parameters.after-scripts >>
  serverless:
    docker:
      - image: circleci/node:lts
    working_directory: ~/select-frontend/serverless
    parameters:
      aws-access-key-id:
         type: env_var_name
         default: SLS_AWS_ACCESS_KEY_ID
      aws-secret-access-key:
         type: env_var_name
         default: SLS_AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - install:
          key: select-serverless
      - deploy:
          command: |
            export AWS_ACCESS_KEY_ID=${<< parameters.aws-access-key-id >>}
            export AWS_SECRET_ACCESS_KEY=${<< parameters.aws-secret-access-key >>}
            yarn serverless deploy --stage production -v
workflows:
  version: 2
  deploy-dev:
    jobs:
      - build:
          name: build-dev
          filters: &master_only
            branches:
              only:
                - master
          dev: true
      - deploy:
          name: deploy-dev
          requires:
            - build-dev
          aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
          aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
          s3-bucket: DEV_S3_BUCKET
          arguments: --exclude "staging.html"
          after-scripts:
            - notify:
                channel: deploy-select-dev
  deploy-stage:
    jobs:
      - build:
          name: build-stage
          filters: *master_only
      - deploy:
          name: deploy-stage
          requires:
            - build-stage
          entry-file: staging.html
          arguments: |
            --exclude "index.html" \
            --exclude "*.map"
          after-scripts:
            - notify:
                prefix: '[PRE-RELEASE]'
  deploy-prod:
    jobs:
      - build:
          name: build-prod
          filters: &releases_only
            branches:
              only:
                - /release\/.+/
      - deploy-approval:
          type: approval
          requires:
            - build-prod
      - deploy:
          name: deploy-prod
          requires:
            - deploy-approval
          arguments: |
            --exclude "staging.html" \
            --exclude "*.map"
          after-scripts:
            - sentry_upload
            - notify
      - wait-serverless-approval:
          type: approval
          filters: *releases_only
      - serverless:
          requires:
            - wait-serverless-approval
