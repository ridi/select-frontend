version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.9

# -------------------------------------------------------------------------
# reusable excutors and commands definition -------------------------------
# -------------------------------------------------------------------------
executors:
  default_excuter: # build reusable excuter
    docker:
      - image: node:carbon-alpine
    working_directory: ~/select-frontend
  deploy_executer: # deploy reusable excuter
    docker:
      - image: circleci/python
    environment:
      S3_STAGING_FILE: s3://${PROD_S3_BUCKET}/staging.html
      S3_RELEASE_CANDIDATE_FILE: s3://${PROD_S3_BUCKET}/releases/${CIRCLE_SHA1}.html
      S3_RELEASE_PARAMS: "--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate"
      S3_ASSETS_PARAMS: "--cache-control public,max-age=31536000"
      AWS_REGION: ${AWS_DEFAULT_REGION}

commands:
  common-build-process:
    description: "common build process for dev and production"
    parameters:
      build_type:
        type: string
        default: production
      run_command:
        type: string
        default: yarn build
    steps:
      - checkout
      - run:
          name: "set ca-certificates no cache"
          command: apk add --no-cache ca-certificates
      - restore_cache:
          keys:
            - select-frontend-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - select-frontend-{{ .Branch }}-
            - select-frontend-
      - run:
          name: "install yarn packages"
          command: yarn install --frozen-lockfile
      - save_cache:
          key: select-frontend-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: ~/.cache/yarn
      - run:
          name: "<< parameters.build_type >> build"
          command: << parameters.run_command >>
      - persist_to_workspace:
          root: .
          paths:
            - dist/

# -------------------------------------------------------------------------
# reusable blocks definition ----------------------------------------------
# -------------------------------------------------------------------------
develop_aws_key: &develop_aws_key
  aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
  aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY

production_aws_key: &production_aws_key
  # aws-access-key-id: PROD_AWS_ACCESS_KEY_ID
  # aws-secret-access-key: PROD_AWS_SECRET_ACCESS_KEY
  aws-access-key-id: DEV_AWS_ACCESS_KEY_ID # TODO: 테스트 중에는 aws access key 안넣도록 임시로 dev 키 할당
  aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY # TODO: 테스트 중에는 aws access key 안넣도록 임시로 dev 키 할당
# -------------------------------------------------------------------------
# jobs definition ---------------------------------------------------------
# -------------------------------------------------------------------------
jobs:
  # build jobs ----------------------------------
  build:
    parameters:
      dev:
        type: boolean
        default: false
      prod:
        type: boolean
        default: false
    executor: default_excuter
    steps:
      - when:
          condition: <<parameters.dev>>
          stpes:
            - run:
                name: Set develop build Environment Variables
                command: |
                  echo 'export SELECT_URL="https://select.ridi.io"' >> $BASH_ENV
                  echo 'export SELECT_API="https://select-api.dev.ridi.io"' >> $BASH_ENV
                  echo 'export STORE_URL="https://master.test.ridi.io"' >> $BASH_ENV
                  echo 'export STORE_API="https://master.test.ridi.io"' >> $BASH_ENV
                  echo 'export PAY_URL="https://pay.ridi.io"' >> $BASH_ENV
                  echo 'export ACCOUNT_API="https://account.dev.ridi.io"' >> $BASH_ENV
                  echo 'export OAUTH2_CLIENT_ID="$DEV_OAUTH2_CLIENT_ID"' >> $BASH_ENV
            - common-build-process:
                build_type: "develop"
                run_command: unset ASSET_PATH && unset SENTRY_DSN && yarn webpack
      - when:
          condition: <<parameters.prod>>
          steps:
            - common-build-process:
                build_type: "production"
                run_command: yarn build
  # deploy jobs ----------------------------------
  deploy:
    executor: deploy_executer
    parameters:
      dev:
        type: boolean
        default: false
      staging:
        type: boolean
        default: false
      prod:
        type: boolean
        default: false
    steps:
      - attach_workspace:
          at: .
      # dev 배포 ------------------------------------
      - when:
          condition: <<parameters.dev>>
          steps:
            - aws-s3/sync:
                from: dist
                to: s3://${DEV_S3_BUCKET}
                <<: *develop_aws_key
                arguments: |
                  --exclude "staging.html" \
                  ${S3_ASSETS_PARAMS}
            - aws-s3/copy:
                from: s3://${DEV_S3_BUCKET}/index.html
                to: s3://${DEV_S3_BUCKET}/index.html
                <<: *develop_aws_key
                arguments: ${S3_RELEASE_PARAMS}
      # staging & candidate 배포 ------------------------------------
      - when:
          condition: <<parameters.staging>>
          steps:
            # staging 배포 ------------------------------------
            - aws-s3/sync:
                from: dist
                to: s3://${PROD_S3_BUCKET}
                <<: *production_aws_key
                arguments: |
                  --exclude "index.html" \
                  --exclude "*.map" \
                  ${S3_ASSETS_PARAMS}
            - aws-s3/copy:
                from: ${S3_STAGING_FILE}
                to: ${S3_STAGING_FILE}
                <<: *production_aws_key
                arguments: ${S3_RELEASE_PARAMS}
            # candidate 배포 ------------------------------------
            - aws-s3/sync:
                from: dist
                to: s3://${PROD_S3_BUCKET}
                <<: *production_aws_key
                arguments: |
                  --exclude "*.html" \
                  --exclude "*.map" \
                  ${S3_ASSETS_PARAMS}
            - aws-s3/copy:
                from: dist/index.html
                to: ${S3_RELEASE_CANDIDATE_FILE}
                <<: *production_aws_key
      # production 배포 ------------------------------------
      - when:
          condition: <<parameters.prod>>
          steps:
            - aws-s3/copy:
                from: ${S3_RELEASE_CANDIDATE_FILE}
                to: s3://${PROD_S3_BUCKET}/index.html
                <<: *production_aws_key
                arguments: ${S3_RELEASE_PARAMS}
  sourcemaps:
    environment:
      SENTRY_LOG_LEVEL: debug
    docker:
      - image: getsentry/sentry-cli
    working_directory: ~/select-frontend
    steps:
      - attach_workspace:
          at: .
      - deploy:
          command: |
            sentry-cli releases new ${CIRCLE_SHA1}
            sentry-cli releases files ${CIRCLE_SHA1} upload-sourcemaps ${CIRCLE_WORKING_DIRECTORY}/dist/*.map
            sentry-cli releases finalize ${CIRCLE_SHA1}
  serverless:
    environment:
      AWS_ACCESS_KEY_ID: ${SLS_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${SLS_AWS_SECRET_ACCESS_KEY}
    executor: default_excuter
    steps:
      - checkout
      - run:
          name: "before serverless deploy script"
          command: |
            cd serverless
            yarn install --frozen-lockfile
      - run:
          name: run serverless deploy script
          command: yarn serverless deploy --stage production -v

# -------------------------------------------------------------------------
# workflows definition ----------------------------------------------------
# -------------------------------------------------------------------------
workflows:
  version: 2
  dev-build-deploy-test:
    jobs:
      - build: # develop 빌드 후 select.ridi.io 배포
          dev: true
      - deploy:
          requires:
            - develop-build
          dev: true
  build-develop-env:
    jobs:
      - build:
          filters:
              branches:
                only: develop
          dev: true
  build-and-deploy-test-env:
    jobs:
      - build: # develop 빌드 후 select.ridi.io 배포
          filters:
            branches:
              only:
                - master
          dev: true
      - deploy:
          requires:
            - develop-build
          dev: true
      - build: # 프로덕션 빌드 후 staging 배포 & candidate 배포
          filters:
            branches:
              only:
                - master
          prod: true
      - deploy:
          requires:
            - production-build
          staging: true
  deploy-production: # 프로덕션 빌드 후 production 배포 (candidate to production copy) & sourcemaps, serverless 배포
    jobs:
      - build:
          filters:
            branches:
              only:
                - /release\/.*/
          prod: true
      - wait-approval: # 사용자의 approval을 대기하기 위한 용도
          type: approval
          requires:
            - production-build
      - deploy:
          requires:
            - wait-approval
          prod: true
      - sourcemaps:
          requires:
            - production-build
      - serverless:
          requires:
            - production-build